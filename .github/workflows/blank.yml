name: Advanced Concurrency CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Global concurrency settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  GO_VERSION: '1.21'

jobs:
  # Job 1: Code quality checks - runs in parallel
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    concurrency:
      group: code-quality-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        check: [lint, format, security, dependencies]
        include:
          - check: lint
            command: npm run lint
          - check: format
            command: npm run format:check
          - check: security
            command: npm audit --audit-level moderate
          - check: dependencies
            command: npm run check-deps
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - name: Run ${{ matrix.check }}
        run: ${{ matrix.command }}

  # Job 2: Multi-language testing
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: code-quality
    concurrency:
      group: test-${{ matrix.os }}-${{ matrix.language }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        language: [node, python, go]
        include:
          - language: node
            setup-action: actions/setup-node@v4
            version: ${{ env.NODE_VERSION }}
            cache: npm
            test-command: npm test
            coverage-command: npm run coverage
          - language: python
            setup-action: actions/setup-python@v4
            version: ${{ env.PYTHON_VERSION }}
            cache: pip
            test-command: pytest
            coverage-command: pytest --cov=.
          - language: go
            setup-action: actions/setup-go@v4
            version: ${{ env.GO_VERSION }}
            cache: ''
            test-command: go test ./...
            coverage-command: go test -coverprofile=coverage.out ./...
        exclude:
          - os: windows-latest
            language: go
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup ${{ matrix.language }}
        uses: ${{ matrix.setup-action }}
        with:
          ${{ matrix.language }}-version: ${{ matrix.version }}
          cache: ${{ matrix.cache }}
      
      - name: Install dependencies
        run: |
          if [ "${{ matrix.language }}" == "node" ]; then
            npm ci
          elif [ "${{ matrix.language }}" == "python" ]; then
            pip install -r requirements.txt
          elif [ "${{ matrix.language }}" == "go" ]; then
            go mod download
          fi
        shell: bash
      
      - name: Run tests
        run: ${{ matrix.test-command }}
      
      - name: Generate coverage
        run: ${{ matrix.coverage-command }}
        continue-on-error: true
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: ${{ matrix.language }}

  # Job 3: Database migration tests
  database-migration:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    concurrency:
      group: db-migration-${{ github.ref }}
      cancel-in-progress: false  # Don't cancel DB operations
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        migration-type: [schema, data, rollback]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Run ${{ matrix.migration-type }} migration
        run: npm run migrate:${{ matrix.migration-type }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379

  # Job 4: Build artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, database-migration]
    concurrency:
      group: build-${{ github.ref }}-${{ github.sha }}
      cancel-in-progress: true
    strategy:
      matrix:
        target: [web, api, worker, admin]
        include:
          - target: web
            dockerfile: Dockerfile.web
            context: ./web
          - target: api
            dockerfile: Dockerfile.api
            context: ./api
          - target: worker
            dockerfile: Dockerfile.worker
            context: ./worker
          - target: admin
            dockerfile: Dockerfile.admin
            context: ./admin
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 5: Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: security-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        scanner: [trivy, snyk, codeql]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-results.sarif
      
      - name: Initialize CodeQL
        if: matrix.scanner == 'codeql'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python, go
      
      - name: Perform CodeQL Analysis
        if: matrix.scanner == 'codeql'
        uses: github/codeql-action/analyze@v2

  # Job 6: Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    concurrency:
      group: performance-${{ github.ref }}
      cancel-in-progress: false
    strategy:
      matrix:
        test-type: [load, stress, spike, volume]
        include:
          - test-type: load
            duration: '5m'
            users: 100
          - test-type: stress
            duration: '10m'
            users: 500
          - test-type: spike
            duration: '2m'
            users: 1000
          - test-type: volume
            duration: '15m'
            users: 200
    steps:
      - uses: actions/checkout@v4
      - name: Run K6 ${{ matrix.test-type }} test
        run: |
          docker run --rm -i grafana/k6 run \
            --duration ${{ matrix.duration }} \
            --vus ${{ matrix.users }} \
            - < ./k6-tests/${{ matrix.test-type }}.js

  # Job 7: Deployment vá»›i environment-specific concurrency
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Deployment logic here
        env:
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
          STAGING_URL: ${{ vars.STAGING_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    strategy:
      matrix:
        region: [us-east-1, eu-west-1, ap-southeast-1]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production (${{ matrix.region }})
        run: |
          echo "Deploying to production in ${{ matrix.region }}..."
          # Blue-green deployment logic
        env:
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
          AWS_REGION: ${{ matrix.region }}
          PRODUCTION_URL: ${{ vars.PRODUCTION_URL }}

  # Job 8: Post-deployment verification
  post-deploy-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    concurrency:
      group: verification-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        environment: [staging, production]
        test-suite: [smoke, integration, e2e]
        exclude:
          - environment: staging
            test-suite: e2e
          - environment: production
            test-suite: integration
    steps:
      - uses: actions/checkout@v4
      - name: Run ${{ matrix.test-suite }} tests on ${{ matrix.environment }}
        run: |
          npm run test:${{ matrix.test-suite }} -- --env=${{ matrix.environment }}
        env:
          TEST_URL: ${{ matrix.environment == 'production' && vars.PRODUCTION_URL || vars.STAGING_URL }}

  # Job 9: Cleanup vÃ  notification
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [post-deploy-verification]
    if: always()
    concurrency:
      group: cleanup-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Cleanup temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # Cleanup logic here

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deploy-verification]
    if: always()
    concurrency:
      group: notify-${{ github.workflow }}-${{ github.run_id }}
      cancel-in-progress: false
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

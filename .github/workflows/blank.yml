name: Concurrency Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      parallel_jobs:
        description: 'Number of parallel test jobs'
        required: false
        default: '3'
        type: string

# Global concurrency - chỉ cho phép 1 workflow chạy cùng lúc cho mỗi branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Job khởi tạo - chạy đầu tiên
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build-id: ${{ steps.generate-id.outputs.build-id }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate build ID
        id: generate-id
        run: |
          BUILD_ID="build-$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}"
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "🆔 Build ID: $BUILD_ID"
      
      - name: Set test matrix
        id: set-matrix
        run: |
          PARALLEL_JOBS="${{ github.event.inputs.parallel_jobs || '3' }}"
          # Sử dụng Python để tạo JSON matrix chính xác
          MATRIX=$(python3 -c "import json; print(json.dumps(list(range(1, int('$PARALLEL_JOBS') + 1))))")
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "🔢 Test matrix: $MATRIX"
      
      - name: Check deployment condition
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment enabled"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Deployment disabled"
          fi

  # Job build song song với validation
  build:
    runs-on: ubuntu-latest
    needs: setup
    # Concurrency riêng cho build jobs
    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: false
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-build
          - os: windows-latest
            artifact-name: windows-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          echo "🔧 Setting up build environment on ${{ matrix.os }}"
          echo "Build ID: ${{ needs.setup.outputs.build-id }}"
      
      - name: Simulate build process
        run: |
          echo "🏗️ Building application..."
          sleep 10
          echo "Build artifact: ${{ matrix.artifact-name }}"
          mkdir -p dist
          echo "Built on ${{ matrix.os }} at $(date)" > dist/${{ matrix.artifact-name }}.txt
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/

  # Validation jobs chạy song song với build
  validation:
    runs-on: ubuntu-latest
    needs: setup
    concurrency:
      group: validation-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        check-type: [lint, security, dependencies]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run ${{ matrix.check-type }} check
        run: |
          echo "🔍 Running ${{ matrix.check-type }} validation..."
          case "${{ matrix.check-type }}" in
            "lint")
              echo "Checking code style..."
              sleep 5
              echo "✅ Lint check passed"
              ;;
            "security")
              echo "Scanning for security vulnerabilities..."
              sleep 8
              echo "🛡️ Security scan completed"
              ;;
            "dependencies")
              echo "Checking dependency vulnerabilities..."
              sleep 6
              echo "📦 Dependencies validated"
              ;;
          esac

  # Test jobs song song với concurrency phức tạp
  test:
    runs-on: ubuntu-latest
    needs: [setup, validation]
    # Concurrency cho từng test job riêng biệt
    concurrency:
      group: test-${{ matrix.job-id }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        job-id: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run test suite ${{ matrix.job-id }}
        run: |
          echo "🧪 Running test suite ${{ matrix.job-id }}..."
          echo "Build ID: ${{ needs.setup.outputs.build-id }}"
          
          # Simulate different test durations
          TEST_DURATION=$((RANDOM % 20 + 10))
          echo "Test duration: ${TEST_DURATION}s"
          
          for i in $(seq 1 5); do
            echo "Test ${{ matrix.job-id }}.${i}: Running..."
            sleep $((TEST_DURATION / 5))
            echo "Test ${{ matrix.job-id }}.${i}: ✅ PASSED"
          done
          
          echo "🎉 Test suite ${{ matrix.job-id }} completed successfully!"

  # Integration tests - chạy sau khi build và test xong
  integration-test:
    runs-on: ubuntu-latest
    needs: [build, test]
    concurrency:
      group: integration-${{ github.ref }}
      cancel-in-progress: false
    strategy:
      matrix:
        service: [api, web, database]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts
      
      - name: Integration test for ${{ matrix.service }}
        run: |
          echo "🔗 Running integration tests for ${{ matrix.service }}..."
          echo "Using artifacts: $(ls -la ./artifacts/)"
          
          case "${{ matrix.service }}" in
            "api")
              echo "Testing API endpoints..."
              sleep 12
              echo "✅ API tests passed"
              ;;
            "web")
              echo "Testing web interface..."
              sleep 8
              echo "🌐 Web tests passed"
              ;;
            "database")
              echo "Testing database connections..."
              sleep 10
              echo "🗄️ Database tests passed"
              ;;
          esac

  # Performance testing với concurrency giới hạn
  performance-test:
    runs-on: ubuntu-latest
    needs: [build]
    # Giới hạn chỉ 1 performance test chạy cùng lúc
    concurrency:
      group: performance-test
      cancel-in-progress: false
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Setup performance testing
        run: |
          echo "⚡ Setting up performance test environment..."
          echo "This is resource intensive, so only 1 runs at a time"
      
      - name: Run load tests
        run: |
          echo "🚀 Running load tests..."
          for load in 10 50 100 200; do
            echo "Testing with $load concurrent users..."
            sleep 3
            echo "Response time: $((RANDOM % 500 + 100))ms"
          done
          echo "📊 Performance tests completed"

  # Security scan với concurrency riêng
  security-scan:
    runs-on: ubuntu-latest
    needs: [build]
    concurrency:
      group: security-scan-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        scan-type: [sast, dast, container]
    steps:
      - name: Run ${{ matrix.scan-type }} security scan
        run: |
          echo "🔒 Running ${{ matrix.scan-type }} security scan..."
          
          case "${{ matrix.scan-type }}" in
            "sast")
              echo "Static Application Security Testing..."
              sleep 15
              echo "🛡️ SAST scan completed"
              ;;
            "dast")
              echo "Dynamic Application Security Testing..."
              sleep 20
              echo "🎯 DAST scan completed"
              ;;
            "container")
              echo "Container Security Scanning..."
              sleep 12
              echo "📦 Container scan completed"
              ;;
          esac

  # Deployment jobs với concurrency environment-specific
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, performance-test, security-scan, setup]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Build ID: ${{ needs.setup.outputs.build-id }}"
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
          sleep 15
          echo "✅ Staging deployment completed"
      
      - name: Run smoke tests
        run: |
          echo "💨 Running smoke tests on staging..."
          sleep 5
          echo "✅ Smoke tests passed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, setup]
    if: needs.setup.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    steps:
      - name: Deploy to production
        run: |
          echo "🎯 Deploying to production environment..."
          echo "Build ID: ${{ needs.setup.outputs.build-id }}"
          sleep 20
          echo "🎉 Production deployment completed"
      
      - name: Post-deployment verification
        run: |
          echo "✅ Running post-deployment verification..."
          sleep 8
          echo "🏆 All systems operational"

  # Cleanup job - chạy cuối cùng
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    concurrency:
      group: cleanup-${{ github.run_id }}
      cancel-in-progress: false
    steps:
      - name: Cleanup resources
        run: |
          echo "🧹 Cleaning up temporary resources..."
          echo "Workflow run: ${{ github.run_id }}"
          sleep 5
          echo "✅ Cleanup completed"
      
      - name: Send notifications
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "📧 Sending success notification..."
          else
            echo "⚠️ Sending failure notification..."
          fi
          echo "Notification sent to team"
